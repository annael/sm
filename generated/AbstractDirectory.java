/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import java.util.List;


public abstract class AbstractDirectory
{



   /**
    * <pre>
    *           0..n     has     0..n
    * AbstractDirectory ------------------------- AbstractFile
    *           abstractDirectory               abstractFile
    * </pre>
    */
   public static final String PROPERTY_ABSTRACT_FILE = "abstractFile";

   @Property( name = PROPERTY_ABSTRACT_FILE, partner = AbstractFile.PROPERTY_ABSTRACT_DIRECTORY, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<AbstractFile> abstractFile;

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public Set<? extends AbstractFile> getAbstractFile()
   {
      return ((this.abstractFile == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.abstractFile));
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public boolean addToAbstractFile (AbstractFile value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.abstractFile == null)
         {
            this.abstractFile = new FHashSet<AbstractFile> ();

         }
      
         changed = this.abstractFile.add (value);
         if (changed)
         {
            value.addToAbstractDirectory (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public AbstractDirectory withAbstractFile (AbstractFile value)
   {
      addToAbstractFile (value);
      return this;
   }

   public AbstractDirectory withoutAbstractFile (AbstractFile value)
   {
      removeFromAbstractFile (value);
      return this;
   }


   public boolean removeFromAbstractFile (AbstractFile value)
   {
      boolean changed = false;

      if ((this.abstractFile != null) && (value != null))
      {
      
         changed = this.abstractFile.remove (value);
         if (changed)
         {
            value.removeFromAbstractDirectory (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public void removeAllFromAbstractFile (){
   
      AbstractFile tmpValue;
      Iterator<? extends AbstractFile> iter = this.iteratorOfAbstractFile ();
      while (iter.hasNext ())
      {
         tmpValue = (AbstractFile) iter.next ();
         this.removeFromAbstractFile (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public boolean hasInAbstractFile (AbstractFile value)
   {
      return ((this.abstractFile != null) &&
              (value != null) &&
              this.abstractFile.contains (value));
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public Iterator<? extends AbstractFile> iteratorOfAbstractFile ()
   {
      return ((this.abstractFile == null)
              ? FEmptyIterator.<AbstractFile>get ()
              : this.abstractFile.iterator ());
   }

   @Property( name = PROPERTY_ABSTRACT_FILE )
   public int sizeOfAbstractFile ()
   {
      return ((this.abstractFile == null)
              ? 0
              : this.abstractFile.size ());
   }

   public abstract void accept (Visitor visitor );

   public abstract int countFiles ();

   public abstract List findAll ();

   public static final String PROPERTY_NAME = "name";

   @Property( name = PROPERTY_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String name;

   @Property( name = PROPERTY_NAME )
   public void setName (String value)
   {
      this.name = value;
   }

   public AbstractDirectory withName (String value)
   {
      setName (value);
      return this;
   }

   @Property( name = PROPERTY_NAME )
   public String getName ()
   {
      return this.name;
   }

   public void removeYou()
   {
      this.removeAllFromAbstractFile ();
   }
}


