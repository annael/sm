/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Stack
{



   private  Stack ()
   {
   }

   public static Stack getInstance ()
   {
   }

   public static final String PROPERTY_STACK = "stack";

   @Property( name = PROPERTY_STACK, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private static Stack stack = new Stack();


   /**
    * <pre>
    *           1     contain     0..n
    * Stack ------------------------- Card
    *           card               stack
    * </pre>
    */
   public static final String PROPERTY_STACK = "stack";

   @Property( name = PROPERTY_STACK, partner = Card.PROPERTY_CARD, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<Card> stack;

   @Property( name = PROPERTY_STACK )
   public List<? extends Card> getStack()
   {
      return ((this.stack == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.stack));
   }

   @Property( name = PROPERTY_STACK )
   public boolean addToStack (Card value)
   {
      boolean changed = false;

      if (value != null && !this.hasInStack (value))
      {
         if (this.stack == null)
         {
            this.stack = new FLinkedList<Card> ();

         }
      
         changed = this.stack.add (value);
         if (changed)
         {
            value.setCard (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_STACK )
   public Stack withStack (Card value)
   {
      addToStack (value);
      return this;
   }

   public Stack withoutStack (Card value)
   {
      removeFromStack (value);
      return this;
   }


   public boolean removeFromStack (Card value)
   {
      boolean changed = false;

      if ((this.stack != null) && (value != null))
      {
      
         changed = this.stack.remove (value);
         if (changed)
         {
            value.setCard (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_STACK )
   public void removeAllFromStack (){
   
      Card tmpValue;
      Iterator<? extends Card> iter = this.iteratorOfStack ();
      while (iter.hasNext ())
      {
         tmpValue = (Card) iter.next ();
         this.removeFromStack (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_STACK )
   public boolean hasInStack (Card value)
   {
      return ((this.stack != null) &&
              (value != null) &&
              this.stack.contains (value));
   }

   @Property( name = PROPERTY_STACK )
   public ListIterator<? extends Card> iteratorOfStack ()
   {
      return ((this.stack == null)
              ? FEmptyListIterator.<Card>get ()
              : this.stack.listIterator());
   }

   @Property( name = PROPERTY_STACK )
   public int sizeOfStack ()
   {
      return ((this.stack == null)
              ? 0
              : this.stack.size ());
   }
   @Property( name = PROPERTY_STACK )
   public Card getFirstOfStack ()
   {
      if (stack == null)
      {
         return null;
      }
      else
      {
         if (stack.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (Card) stack.getFirst ();
      }
   }

   @Property( name = PROPERTY_STACK )
   public Card getLastOfStack ()
   {
      if (stack == null)
      {
         return null;
      }
      else
      {
         if (stack.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (Card) stack.getLast ();
      }
   }
   @Property( name = PROPERTY_STACK )
   public Card getFromStack ( int index )
   {
      if (index >= 0 && index < sizeOfStack ())
      {
         return (Card) this.stack.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getStackAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_STACK )
   public int indexOfStack ( Card value )
   {
      return ((this.stack == null)
              ? -1
              : this.stack.indexOf (value));
   }

   @Property( name = PROPERTY_STACK )
   public int indexOfStack ( Card value, int index )
   {
      return ((this.stack == null)
   	       ? -1
   	       : this.stack.indexOf (value, index));
   }

   @Property( name = PROPERTY_STACK )
   public int lastIndexOfStack ( Card value )
   {
      return ((this.stack == null)
               ? -1
               : this.stack.lastIndexOf (value));
   }

   @Property( name = PROPERTY_STACK )
   public int lastIndexOfStack ( Card value, int index )
   {
      return ((this.stack == null)
               ? -1
               : this.stack.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_STACK )
   public boolean isBeforeOfStack ( Card leftObject, Card rightObject)
   {
      if (stack == null)
      {
         return false;
      }
      else
      {
         return stack.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_STACK )
   public boolean isAfterOfStack ( Card leftObject, Card rightObject)
   {
      if (stack == null)
      {
         return false;
      }
      else
      {
         return stack.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_STACK )
   public Card getNextOfStack ( Card object )
   {
      if (stack == null)
      {
         return null;
      }
      else
      {
         return (Card) stack.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_STACK )
   public Card getNextOfStack ( Card object, int index)
   {
      if (stack == null)
      {
         return null;
      }
      else
      {
         return (Card) stack.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_STACK )
   public Card getPreviousOfStack ( Card object)
   {
      if (stack == null)
      {
         return null;
      }
      else
      {
         return (Card) stack.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_STACK )
   public Card getPreviousOfStack ( Card object, int index )
   {
      if (stack == null)
      {
         return null;
      }
      else
      {
         return (Card) stack.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_STACK )
   public boolean addAfterOfStack ( Card refObject, Card value)
   {
      boolean changed = false;
      if (stack != null)
      {
         int index = stack.indexOf (refObject);
         changed = addToStack (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_STACK )
   public boolean addBeforeOfStack ( Card refObject, Card value)
   {
      boolean changed = false;
      if (stack != null)
      {
         int index = stack.indexOf (refObject);
         changed = addToStack (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_STACK )
   public boolean addToStack (int index, Card value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.stack == null)
         {
            this.stack = new FLinkedList<Card> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfStack (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  stack.remove (oldIndex);
               }
               stack.add (index, value);
               if (oldIndex < 0)
               {
                  value.setCard (this);
               }
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_STACK )
   public boolean setInStack (int index, Card value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.stack == null)
         {
            this.stack = new FLinkedList<Card> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfStack (value);
         if (oldIndex != index)
         {
            try
            {
            
               Card oldValue = (Card)this.stack.set (index, value);
               if (oldIndex > -1)
               {
                  this.stack.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  if (oldValue != null)
                  {
                     oldValue.setCard (null);
                  }
                  if (oldIndex < 0)
                  {
                     value.setCard (this);
                  }
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_STACK )
   public boolean removeFromStack (int index)
   {
      boolean changed = false;

      if (this.stack != null && (index >= 0 && index < this.stack.size ()))
      {
      
         Card tmpValue = (Card) this.stack.remove (index);
         if (tmpValue != null)
         {
            tmpValue.setCard (null);
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_STACK )
   public boolean removeFromStack (int index, Card value)
   {
      boolean changed = false;

      if ((this.stack != null) && (value != null) && 
          (index >= 0 && index < this.stack.size ()))
      {
         Card oldValue = (Card) this.stack.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromStack (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_STACK )
   public ListIterator<? extends Card> iteratorOfStack ( Card  lowerBound )
   {
      ListIterator<Card> result = FEmptyListIterator.<Card>get ();

      if (stack != null && lowerBound != null)
      {
         int index = stack.indexOf (lowerBound) + 1;
         result = stack.listIterator (index);
      }
      else if (stack != null && lowerBound == null)
      {
         result = stack.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_STACK )
   public ListIterator<? extends Card> iteratorOfStack (int index)
   {
      return ((this.stack == null)
              ? FEmptyListIterator.<Card>get ()
              : this.stack.listIterator (Math.max(0,Math.min(index,this.stack.size ()))));
   }

   public void removeYou()
   {
      this.removeAllFromStack ();
   }
}


