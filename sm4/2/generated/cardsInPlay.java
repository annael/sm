/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class cardsInPlay
{



   /**
    * <pre>
    *           1     contain     1..n
    * cardsInPlay ------------------------- Card
    *           cardsInPlay               card
    * </pre>
    */
   public static final String PROPERTY_CARD = "card";

   @Property( name = PROPERTY_CARD, partner = Card.PROPERTY_CARDS_IN_PLAY, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<Card> card;

   @Property( name = PROPERTY_CARD )
   public List<? extends Card> getCard()
   {
      return ((this.card == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.card));
   }

   @Property( name = PROPERTY_CARD )
   public boolean addToCard (Card value)
   {
      boolean changed = false;

      if (value != null && !this.hasInCard (value))
      {
         if (this.card == null)
         {
            this.card = new FLinkedList<Card> ();

         }
      
         changed = this.card.add (value);
         if (changed)
         {
            value.setCardsInPlay (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public cardsInPlay withCard (Card value)
   {
      addToCard (value);
      return this;
   }

   public cardsInPlay withoutCard (Card value)
   {
      removeFromCard (value);
      return this;
   }


   public boolean removeFromCard (Card value)
   {
      boolean changed = false;

      if ((this.card != null) && (value != null))
      {
      
         changed = this.card.remove (value);
         if (changed)
         {
            value.setCardsInPlay (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public void removeAllFromCard (){
   
      Card tmpValue;
      Iterator<? extends Card> iter = this.iteratorOfCard ();
      while (iter.hasNext ())
      {
         tmpValue = (Card) iter.next ();
         this.removeFromCard (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_CARD )
   public boolean hasInCard (Card value)
   {
      return ((this.card != null) &&
              (value != null) &&
              this.card.contains (value));
   }

   @Property( name = PROPERTY_CARD )
   public ListIterator<? extends Card> iteratorOfCard ()
   {
      return ((this.card == null)
              ? FEmptyListIterator.<Card>get ()
              : this.card.listIterator());
   }

   @Property( name = PROPERTY_CARD )
   public int sizeOfCard ()
   {
      return ((this.card == null)
              ? 0
              : this.card.size ());
   }
   @Property( name = PROPERTY_CARD )
   public Card getFirstOfCard ()
   {
      if (card == null)
      {
         return null;
      }
      else
      {
         if (card.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (Card) card.getFirst ();
      }
   }

   @Property( name = PROPERTY_CARD )
   public Card getLastOfCard ()
   {
      if (card == null)
      {
         return null;
      }
      else
      {
         if (card.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (Card) card.getLast ();
      }
   }
   @Property( name = PROPERTY_CARD )
   public Card getFromCard ( int index )
   {
      if (index >= 0 && index < sizeOfCard ())
      {
         return (Card) this.card.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getCardAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_CARD )
   public int indexOfCard ( Card value )
   {
      return ((this.card == null)
              ? -1
              : this.card.indexOf (value));
   }

   @Property( name = PROPERTY_CARD )
   public int indexOfCard ( Card value, int index )
   {
      return ((this.card == null)
   	       ? -1
   	       : this.card.indexOf (value, index));
   }

   @Property( name = PROPERTY_CARD )
   public int lastIndexOfCard ( Card value )
   {
      return ((this.card == null)
               ? -1
               : this.card.lastIndexOf (value));
   }

   @Property( name = PROPERTY_CARD )
   public int lastIndexOfCard ( Card value, int index )
   {
      return ((this.card == null)
               ? -1
               : this.card.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_CARD )
   public boolean isBeforeOfCard ( Card leftObject, Card rightObject)
   {
      if (card == null)
      {
         return false;
      }
      else
      {
         return card.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_CARD )
   public boolean isAfterOfCard ( Card leftObject, Card rightObject)
   {
      if (card == null)
      {
         return false;
      }
      else
      {
         return card.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_CARD )
   public Card getNextOfCard ( Card object )
   {
      if (card == null)
      {
         return null;
      }
      else
      {
         return (Card) card.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_CARD )
   public Card getNextOfCard ( Card object, int index)
   {
      if (card == null)
      {
         return null;
      }
      else
      {
         return (Card) card.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_CARD )
   public Card getPreviousOfCard ( Card object)
   {
      if (card == null)
      {
         return null;
      }
      else
      {
         return (Card) card.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_CARD )
   public Card getPreviousOfCard ( Card object, int index )
   {
      if (card == null)
      {
         return null;
      }
      else
      {
         return (Card) card.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_CARD )
   public boolean addAfterOfCard ( Card refObject, Card value)
   {
      boolean changed = false;
      if (card != null)
      {
         int index = card.indexOf (refObject);
         changed = addToCard (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public boolean addBeforeOfCard ( Card refObject, Card value)
   {
      boolean changed = false;
      if (card != null)
      {
         int index = card.indexOf (refObject);
         changed = addToCard (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public boolean addToCard (int index, Card value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.card == null)
         {
            this.card = new FLinkedList<Card> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfCard (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  card.remove (oldIndex);
               }
               card.add (index, value);
               if (oldIndex < 0)
               {
                  value.setCardsInPlay (this);
               }
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public boolean setInCard (int index, Card value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.card == null)
         {
            this.card = new FLinkedList<Card> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfCard (value);
         if (oldIndex != index)
         {
            try
            {
            
               Card oldValue = (Card)this.card.set (index, value);
               if (oldIndex > -1)
               {
                  this.card.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  if (oldValue != null)
                  {
                     oldValue.setCardsInPlay (null);
                  }
                  if (oldIndex < 0)
                  {
                     value.setCardsInPlay (this);
                  }
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public boolean removeFromCard (int index)
   {
      boolean changed = false;

      if (this.card != null && (index >= 0 && index < this.card.size ()))
      {
      
         Card tmpValue = (Card) this.card.remove (index);
         if (tmpValue != null)
         {
            tmpValue.setCardsInPlay (null);
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public boolean removeFromCard (int index, Card value)
   {
      boolean changed = false;

      if ((this.card != null) && (value != null) && 
          (index >= 0 && index < this.card.size ()))
      {
         Card oldValue = (Card) this.card.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromCard (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public ListIterator<? extends Card> iteratorOfCard ( Card  lowerBound )
   {
      ListIterator<Card> result = FEmptyListIterator.<Card>get ();

      if (card != null && lowerBound != null)
      {
         int index = card.indexOf (lowerBound) + 1;
         result = card.listIterator (index);
      }
      else if (card != null && lowerBound == null)
      {
         result = card.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_CARD )
   public ListIterator<? extends Card> iteratorOfCard (int index)
   {
      return ((this.card == null)
              ? FEmptyListIterator.<Card>get ()
              : this.card.listIterator (Math.max(0,Math.min(index,this.card.size ()))));
   }

   public static final String PROPERTY_CARDS_IN_PLAY = "cardsInPlay";

   @Property( name = PROPERTY_CARDS_IN_PLAY, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private static cardsInPlay cardsInPlay = new cardsInPlay();

   @Property( name = PROPERTY_CARDS_IN_PLAY )
   private static void setCardsInPlay (cardsInPlay value)
   {
      cardsInPlay.cardsInPlay = value;
   }


   @Property( name = PROPERTY_CARDS_IN_PLAY )
   private static cardsInPlay getCardsInPlay ()
   {
      return cardsInPlay.cardsInPlay;
   }

   private  cardsInPlay ()
   {
   }

   public static cardsInPlay getInstance ()
   {
   }

   public void removeYou()
   {
      this.removeAllFromCard ();
   }
}


