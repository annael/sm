/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Card
{



   /**
    * <pre>
    *           1     ontop     1
    * Card ------------------------- Card
    *           top               bottom
    * </pre>
    */
   public static final String PROPERTY_BOTTOM = "bottom";

   @Property( name = PROPERTY_BOTTOM, partner = Card.PROPERTY_TOP, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card bottom;

   @Property( name = PROPERTY_BOTTOM )
   public boolean setBottom (Card value)
   {
      boolean changed = false;

      if (this.bottom != value)
      {
      
         Card oldValue = this.bottom;
         Card source = this;
         if (this.bottom != null)
         {
            this.bottom = null;
            oldValue.setTop (null);
         }
         this.bottom = value;

         if (value != null)
         {
            value.setTop (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_BOTTOM )
   public Card withBottom (Card value)
   {
      setBottom (value);
      return this;
   }

   public Card getBottom ()
   {
      return this.bottom;
   }

   /**
    * <pre>
    *           0..n     contain     1
    * Card ------------------------- Stack
    *           stack               card
    * </pre>
    */
   public static final String PROPERTY_CARD = "card";

   @Property( name = PROPERTY_CARD, partner = Stack.PROPERTY_STACK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Stack card;

   @Property( name = PROPERTY_CARD )
   public boolean setCard (Stack value)
   {
      boolean changed = false;

      if (this.card != value)
      {
      
         Stack oldValue = this.card;
         Card source = this;
         if (this.card != null)
         {
            this.card = null;
            oldValue.removeFromStack (this);
         }
         this.card = value;

         if (value != null)
         {
            value.addToStack (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public Card withCard (Stack value)
   {
      setCard (value);
      return this;
   }

   public Stack getCard ()
   {
      return this.card;
   }

   /**
    * <pre>
    *           0..1     ontop     0..1
    * Card ------------------------- cardsInPlay
    *           ontop               cardsInPlay2
    * </pre>
    */
   public static final String PROPERTY_CARDS_IN_PLAY2 = "cardsInPlay2";

   @Property( name = PROPERTY_CARDS_IN_PLAY2, partner = cardsInPlay.PROPERTY_ONTOP, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private cardsInPlay cardsInPlay2;

   @Property( name = PROPERTY_CARDS_IN_PLAY2 )
   public boolean setCardsInPlay2 (cardsInPlay value)
   {
      boolean changed = false;

      if (this.cardsInPlay2 != value)
      {
      
         cardsInPlay oldValue = this.cardsInPlay2;
         Card source = this;
         if (this.cardsInPlay2 != null)
         {
            this.cardsInPlay2 = null;
            oldValue.setOntop (null);
         }
         this.cardsInPlay2 = value;

         if (value != null)
         {
            value.setOntop (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARDS_IN_PLAY2 )
   public Card withCardsInPlay2 (cardsInPlay value)
   {
      setCardsInPlay2 (value);
      return this;
   }

   public cardsInPlay getCardsInPlay2 ()
   {
      return this.cardsInPlay2;
   }

   /**
    * <pre>
    *           1..n     contain     1
    * Card ------------------------- cardsInPlay
    *           card               cardsInPlay
    * </pre>
    */
   public static final String PROPERTY_CARDS_IN_PLAY = "cardsInPlay";

   @Property( name = PROPERTY_CARDS_IN_PLAY, partner = cardsInPlay.PROPERTY_CARD, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private cardsInPlay cardsInPlay;

   @Property( name = PROPERTY_CARDS_IN_PLAY )
   public boolean setCardsInPlay (cardsInPlay value)
   {
      boolean changed = false;

      if (this.cardsInPlay != value)
      {
      
         cardsInPlay oldValue = this.cardsInPlay;
         Card source = this;
         if (this.cardsInPlay != null)
         {
            this.cardsInPlay = null;
            oldValue.removeFromCard (this);
         }
         this.cardsInPlay = value;

         if (value != null)
         {
            value.addToCard (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARDS_IN_PLAY )
   public Card withCardsInPlay (cardsInPlay value)
   {
      setCardsInPlay (value);
      return this;
   }

   public cardsInPlay getCardsInPlay ()
   {
      return this.cardsInPlay;
   }

   /**
    * <pre>
    *           0..n     has     0..n
    * Card ------------------------- Player
    *           card               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = Player.PROPERTY_CARD, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Player> player;

   @Property( name = PROPERTY_PLAYER )
   public Set<? extends Player> getPlayer()
   {
      return ((this.player == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.player));
   }

   @Property( name = PROPERTY_PLAYER )
   public boolean addToPlayer (Player value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.player == null)
         {
            this.player = new FHashSet<Player> ();

         }
      
         changed = this.player.add (value);
         if (changed)
         {
            value.addToCard (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public Card withPlayer (Player value)
   {
      addToPlayer (value);
      return this;
   }

   public Card withoutPlayer (Player value)
   {
      removeFromPlayer (value);
      return this;
   }


   public boolean removeFromPlayer (Player value)
   {
      boolean changed = false;

      if ((this.player != null) && (value != null))
      {
      
         changed = this.player.remove (value);
         if (changed)
         {
            value.removeFromCard (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public void removeAllFromPlayer (){
   
      Player tmpValue;
      Iterator<? extends Player> iter = this.iteratorOfPlayer ();
      while (iter.hasNext ())
      {
         tmpValue = (Player) iter.next ();
         this.removeFromPlayer (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_PLAYER )
   public boolean hasInPlayer (Player value)
   {
      return ((this.player != null) &&
              (value != null) &&
              this.player.contains (value));
   }

   @Property( name = PROPERTY_PLAYER )
   public Iterator<? extends Player> iteratorOfPlayer ()
   {
      return ((this.player == null)
              ? FEmptyIterator.<Player>get ()
              : this.player.iterator ());
   }

   @Property( name = PROPERTY_PLAYER )
   public int sizeOfPlayer ()
   {
      return ((this.player == null)
              ? 0
              : this.player.size ());
   }

   public static final String PROPERTY_SUIT = "suit";

   @Property( name = PROPERTY_SUIT, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String suit;

   @Property( name = PROPERTY_SUIT )
   public void setSuit (String value)
   {
      this.suit = value;
   }

   public Card withSuit (String value)
   {
      setSuit (value);
      return this;
   }

   @Property( name = PROPERTY_SUIT )
   public String getSuit ()
   {
      return this.suit;
   }

   /**
    * <pre>
    *           1     ontop     1
    * Card ------------------------- Card
    *           bottom               top
    * </pre>
    */
   public static final String PROPERTY_TOP = "top";

   @Property( name = PROPERTY_TOP, partner = Card.PROPERTY_BOTTOM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card top;

   @Property( name = PROPERTY_TOP )
   public boolean setTop (Card value)
   {
      boolean changed = false;

      if (this.top != value)
      {
      
         Card oldValue = this.top;
         Card source = this;
         if (this.top != null)
         {
            this.top = null;
            oldValue.setBottom (null);
         }
         this.top = value;

         if (value != null)
         {
            value.setBottom (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TOP )
   public Card withTop (Card value)
   {
      setTop (value);
      return this;
   }

   public Card getTop ()
   {
      return this.top;
   }

   public static final String PROPERTY_VALUE = "value";

   @Property( name = PROPERTY_VALUE, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String value;

   @Property( name = PROPERTY_VALUE )
   public void setValue (String value)
   {
      this.value = value;
   }

   public Card withValue (String value)
   {
      setValue (value);
      return this;
   }

   @Property( name = PROPERTY_VALUE )
   public String getValue ()
   {
      return this.value;
   }

   public void removeYou()
   {
      this.setBottom (null);
      this.setCard (null);
      this.setCardsInPlay2 (null);
      this.setCardsInPlay (null);
      this.removeAllFromPlayer ();
      this.setTop (null);
   }
}


