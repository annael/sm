/*
 * generated by Fujaba - CodeGen2
 */
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Turn
{



   private  Turn ()
   {
   }

   public static Turn getInstance ()
   {
   }

   /**
    * <pre>
    *           0..1     has     0..n
    * Turn ------------------------- Player
    *           turn               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = Player.PROPERTY_TURN, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Player> player;

   @Property( name = PROPERTY_PLAYER )
   public Set<? extends Player> getPlayer()
   {
      return ((this.player == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.player));
   }

   @Property( name = PROPERTY_PLAYER )
   public boolean addToPlayer (Player value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.player == null)
         {
            this.player = new FHashSet<Player> ();

         }
      
         changed = this.player.add (value);
         if (changed)
         {
            value.setTurn (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public Turn withPlayer (Player value)
   {
      addToPlayer (value);
      return this;
   }

   public Turn withoutPlayer (Player value)
   {
      removeFromPlayer (value);
      return this;
   }


   public boolean removeFromPlayer (Player value)
   {
      boolean changed = false;

      if ((this.player != null) && (value != null))
      {
      
         changed = this.player.remove (value);
         if (changed)
         {
            value.setTurn (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public void removeAllFromPlayer (){
   
      Player tmpValue;
      Iterator<? extends Player> iter = this.iteratorOfPlayer ();
      while (iter.hasNext ())
      {
         tmpValue = (Player) iter.next ();
         this.removeFromPlayer (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_PLAYER )
   public boolean hasInPlayer (Player value)
   {
      return ((this.player != null) &&
              (value != null) &&
              this.player.contains (value));
   }

   @Property( name = PROPERTY_PLAYER )
   public Iterator<? extends Player> iteratorOfPlayer ()
   {
      return ((this.player == null)
              ? FEmptyIterator.<Player>get ()
              : this.player.iterator ());
   }

   @Property( name = PROPERTY_PLAYER )
   public int sizeOfPlayer ()
   {
      return ((this.player == null)
              ? 0
              : this.player.size ());
   }

   public static final String PROPERTY_TURN = "turn";

   @Property( name = PROPERTY_TURN, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private static Turn turn = new Turn();


   public void removeYou()
   {
      this.removeAllFromPlayer ();
   }
}


